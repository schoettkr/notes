1. Use something like archifi, architect or anarchy linux (arch installer) to get up running quickly. The steps I've written down and that always worked as well as what is in the arch wiki didn't work the last time I tried on my laptop that's why I resorted to an installer. Usually I prefer to do everything myself but I didn't succeed and had no time left so I went with anarchy-linux as an installer, that is pretty vanilla anyway. They have different options, I went with the one for 'advanced users' which gave me the most customizability (basically everything I cared for anyway was configurable through this).

* Internet connection
It is important to have an working internet connection. This is easily achieved by opening an Wi-Fi hotspot from phone (Tethering) and connecting via =wpa_supplicant -B -i {interfaceName} -c <(wpa_passphrase '{SSID}' {passphrase})=. The interface can be recieved via =ifconfig= or =ip link=. Full example command: =wpa_supplicant -B -i wlp3s0 -c <(wpa_passphrase 'Y6 Max' a1b2d3)=. However using my phone's wifi hotspot was/is incredibly slow so that wasnt/isnt really practical. It is enough to use =curl= for a small file, as needed in the following section!
** Eduroam
Because I don't have my own internet access and have to rely on the university's internet access via eduroam - things of course have to be more complicated. Quickest solution that I found was uploading an =.tar= archive that contains the targeted =wpa_supplicant.conf= (without the passphrase/identity ofc) and the required certificate (e.g =ca.pem=) to transfer.sh (awesome service!) from another, already setup machine.

On the target device now boot the iso via usb and =curl -O https://transfer.sh/xyz/abc.tar=, extract the archive via =tar -xf abc.tar= and edit the =wpa_supplicant.conf= with e.g nano to include the passphrase/identity as well as the path to the certificate.

Then run =wpa_supplicant -i {interfaceName} -c {path/to/wpa_supplicant.conf}=, in my case that was =wpa_supplicant -i wlp3s0 -c /root/eduroam-config/wpa_supplicant.conf=. If everything goes well the connection will now be established. In my case after =CTRL-EVENT-CONNECTED= showed up I knew it worked, however I didn't get back to the prompt and it stayed as is. I thought the best idea is to =ctrl-z=, but as it turns out that suspends the process and the connection will be gone. I thought that this puts the process in background :D. It would probably have been possible to detach from the process via =&= but I didnt test that because I ended up just running =wpa_supplicant= on the 1st virtual console and switching to another virtual console (tty2) via =Ctrl-Alt-F2=. Okay now we're set (=ping google.com= to verify)!

Another problem that occured was fixed by searching for the pid of =wpa_supplicant= (was running from teathering with phone )with =top= and killing it before runnig wpa_supplicant withthe configuration file. If that doesnt help to kill a connection thats already in place, set the interface down and up with =ip link set wlp3s0 down=. If already on the installed system use =sudo=!

Alternatively use =nmcli device wifi connect <SSID> password <passphrase>= (or =wifi-menu=) when the system is installed because Internet again is required to first obtain dotfiles and then packages.

With =nm-applet= connecting to wifis is relatively easy, however it is buggy with for example eduroam. A workaround is to click =connect to hidden wifi= and enter the ssid as well the rest manually. Also make sure that if using =NetworkManager= that the =dhcpcd= service is not running / enabled on default (check the Services section in the Tips & Tricks part).

The connection config files are usually in =/etc/NetworkManager/system-connections= (may need to =su= first).


* Window manager
Update: Now using =awesome=. Install =awesome-freedesktop= and =lain= as well (additionally roboto font too).
+The anarchy installer allowed me to install my window manager of choice - =bswpm= - already. It also installed =sxhkd= which is used as a hotkey daemon to setup keyboard shortcuts.+
+Also install awesome-revelation-git which is awesome (lel) for switching between clients.+ (\rightarrow not as useful as I thought)



* Dotfiles
Now I'd need my dotfiles. But the most important thing first =sudo pacman -S git=. 
#+BEGIN_SRC  bash
git clone https://github.com/schoettkr/dotfiles.git ~/dotfiles # might want to checkout a specific branch!
sudo pacman -S stow

cd dotfiles # you need to be in the dotfiles directory


stow -v -t ~/.config config # with '-t' the target dir can be set explicitly

mkdir ~/.fonts
stow -v -t ~/.fonts fonts

stow -v git

stow -v scripts

stow -v X

git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh # if not already installed
stow -v zsh
#+END_SRC
You also want to setup github auth (to not be prompted by magit everytime for example). Do the following
#+BEGIN_SRC sh
git config --global --add github.user <user>
git config --global --add github.oauth-token <token>
#+END_SRC


* Package manager
Setup home folder structure first or atleast have =~/arch/pkgs/= in place to then
#+BEGIN_SRC bash
# Also check sometimes that "yay" is still developed and the most common/best package manger :)
git clone https://aur.archlinux.org/yay.git ~/arch/pkgs 
cd arch/pkgs/yay
makepkg -si
#+END_SRC


* Packages
** Essential packages
#+BEGIN_SRC bash
yay -S polybar termite feh google-chrome chromium redshift zsh-autosuggestions neovim rofi bat exa nemo nemo-fileroller nemo-terminal
#+END_SRC
Tip: Use DuckDuckGoog as chrome search engine
** Setup (neo)vim
However that should be done via current line in my config, but nevertheless:
#+BEGIN_SRC bash
curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#+END_SRC
Then open nvim and run =:PlugInstall:=
** File Manager
I survive without a file manager but sometimes it's just nice to have one and manage some files via mouse. For this purpouse install
#+BEGIN_SRC sh
yay spacefm
#+END_SRC
** Emacs
#+BEGIN_SRC bash
cd ~
git clone https://github.com/schoettkr/Terra.git .emacs.d
yay -S emacs
#+END_SRC

** VS Code
Install =yay -S code= and the extension "Settings Sync". Regenerate the github token and then copy the settings gist id so that the settings download.
** Blogging
#+BEGIN_SRC bash
yay -S nikola texlive-core pygmentize
#+END_SRC

** Password management
Import the password file (library -> docs -> passwords.kdbx)
Use keepassxc https://github.com/keepassxreboot/keepassxc
#+BEGIN_SRC 
yay -S keepassxc
#+END_SRC

** Reference managment
Use zotero (gtk2 application) because it has less dependencies than jabref and kbibtex
#+BEGIN_SRC bash
yay zotero
yay texlive-latexextra texlive-bibtexextra biber # for emacs org -> pdf export support
#+END_SRC
Open zotero and go to =Edit -> Preferences -> Advanced -> Files and Folders= and change the data directory location to keep your home directory clean (change to eg =~/arch/pkgs=)
Then install the =zotero-better-bibtex= addon. Instructions can be found here https://retorque.re/zotero-better-bibtex/installation/

** Window compositor
#+BEGIN_SRC bash
yay -S compton
#+END_SRC

** Video Player
Just install =mpv= no questions!!
To resume video playback run =echo "save-position-on-quit" >> ~/.config/mpv/mpv.conf=

** Screenshots
To take screenshots =scrot= is a nice minimal utility. Install it and use it as follows:
- =scrot -u [filename]= to take screenshot of currently focused window
  - =scrot -u -d [num] [filename]= waits =num= seconds before taking the picture (defer)
- =scrot -s [filename]= and click or draw a rectangle to capture the selection
- other options:
 - =-b= also grabs the window's border
 - =-t= grabs a window and creates a thumbnail of it; This can be useful when you're posting screen captures online
 - =-c= creates a countdown in your terminal when you use the -d option
** Document Viewer
#+BEGIN_SRC 
yay evince-light
#+END_SRC
** Ebook Management
Update: Actually I don't like calibre and it does not seem to be worth it for me. Just put your pdfs/mobis/azws in library/books. Convert pdf documents with =k2pdfopt= and html files with https://ebook.online-convert.com/convert-to-mobi. That's it not much hassle. To put files onto your ebook reader just mount it and cp as you'd do for any other device - this is the method of least hassle.

Make sure to have the homefolder structure in place. Books are supposed to go into =~/library/books/Calibre=. Install =calibre= and set it up in accordance to this guide https://www.reddit.com/r/kindle/comments/3b7dzl/tutorial_how_to_use_calibre_to_manage_book/
Copy of the guide (as of 20.11.2018):
**** Le Guide
Setting up Calibre using Welcome Wizard:

Create a new empty folder using your library's desired name

Launch Calibre and choose that folder.

Next, Choose your device. If you choose Kindle, go to step 4. If you choose other e-readers, go to step 6. If you don't want to set up Send-to-Kindle, go to step 6.

Go to Amazon's Manage Your Content and Devices, choose Settings, find Personal Document Settings. Take note of the Send-to-Kindle E-Mail (ending with @Kindle,com). Find Add a new approved e-mail address and type in your GMX email.

In the Next dialog on Calibre welcome wizard, type in your Kindle email. Press Use GMX and type in your GMX credentials.

Next, and you are done.

.

Setting up your Calibre:

Select Preferences

Choose Behavior, set Preferred output format to AZW3 (if you're using Kindle) or EPUB (if you're using other devices). The reason is that AZW3 and EPUB can make use of Calibre's Edit Book function. Apply.

Choose Add your own columns, press the "+" button. Setup the following:

Pages (For Count Pages plugin, to get page number on your books):

Lookup name: pages

Column heading: Pages

Column type: Integers.

Format for numbers: {0,}

Shelf (To manage your reading progress):

Lookup name: shelf

Column heading: Shelf

Column type: Text, column shown in the tag browser.

Choose Common Options, Look & Feel, set Embed font famlly to your preferred font. I choose Bookerly here. Note: I have no problem using Bookerly on the Kindle 7th Gen, but for the older generations, there might be some issues. The font will be in the Publisher's Font option on the Kindle.

Choose Saving books to disk, Copy and paste the following to the Save template: 1. Books/{author_sort}/{title}/{title} - {authors}

Choose Sending books to devices, Copy and paste the following to the Save template: 1. Books/{author_sort}/{title}/{title} - {authors}

Choose Metadata plugboards, Add new plugboard

Format: any format

Device: any device

Source template: {series:|| - }{series_index:0>5.2f|[|] - }{title}

This will save your books like this: Harry Potter - [01.00] - Harry Potter and the Sorcerer's Stone if your book is in a series, or Oliver Twist if your book isn't.

You can look here for more options

Destination field: title

Choose Plugins, find Kindle 2/3/4/Touch/PaperWhite/Voyage Device Interface, set:

Save templates: 1. Books/{author_sort}/{title}/{title} - {authors}

Custom column name to retrieve page counts from: #pages

Disable Overwrite existing apnx on device

Close, and restart Calibre

.

Adding plug-ins to power-up your Calibre:

Select Preferences, choose Plugins

Choose Get new plugins

Find and install Goodreads and Count Pages

Find Count Pages plugin, double click, under Page count options, choose Custom column: #pages. Leave the others blank.

Notes: This only gives you a rough estimation of the books. If you want a more accurate version, use Amazon books, or use the built-in Download page counts from Goodreads

Apply.

Go to Metadata download, and choose Goodreads

Apply, and Restart Calibre.

.

Using Calibre to manage books:

Add books: You can Drag-and-drop the ebook files to Calibre, or use the Add books function.

Edit metadata: You can type in your books' metadata manually, or download the data using Download metadata buttons. Calibre will automatically search book's data and you can choose the matching title.

Convert books: When sending to Kindle, Calibre'll automatically convert your books to Kindle readable formats, but it won't store the file locally. You can convert individually, or bulk convert to save the metadata directly to your books

If you connect Kindle to Calibre, Calibre will automatically find books on your Kindle. To send books to your Kindle, press Send to device.

Fetch news: You can choose your favorite news source from the menu, Press Schedule for download, choose days to download, and Save. Calibre will automatically download News IF IT IS RUNNING and send to your Kindle if you already set up Send-to-Kindle account.
** Calculator
Install =speedcrunch=

** IRC
Maybe get into =weechat= sometime but for now =hexchat= seems to be the sanest/simplest client :)

** VPN (Uni etc)
Install =openconnect= and connect for example like this:
#+BEGIN_SRC sh
sudo openconnect https://vpn-server.uni-hannover.de/
#+END_SRC
And then enter credentials when prompted.

** Heroku
Install the =heroku-cli=. Use =heroku git:remote -a REMOTE-REPO-NAME= to add heroku remote to an existing project.

** Torrent
Use the =transmission-gui=

** Database GUI
- SQL: Dbeaver

** Image Viewer
~yay -S sxiv~


* Homefolder structure
Create the following folder structure in the home directory:
#+BEGIN_SRC 
~/arch
~/dls
~/dev
~/library

;;~/library/docs/misc

~/library/music

mkdir ~/library/books
mkdir ~/library/docs

mkdir ~/library/images
mkdir ~/library/images/misc
mkdir ~/library/images/wallpaper
mkdir ~/library/images/personal

mkdir ~/library/videos
mkdir ~/library/videos/misc
mkdir ~/library/videos/personal
mkdir ~/library/videos/courses

mkdir -p ~/library/audio/misc

mkdir ~/temp

;;mkdir ~/misc
;; ~/docs/coding
;; ~/docs/life
#+END_SRC

To get rid of the folders that are create by default edit (or via dotfiles) =~/.config/user-dirs.dirs= to the wanted structure and then remove them.
Then run =xdg-user-dirs-update=. (PS do not /remove/ =xdg_desktop_dir= <- read this on the internetz but check what really happens!).




* Programming
Stuff that is specific to programming / development
** General
Might consider ripgrep tho
#+BEGIN_SRC bash
yay the_silver_searcher # this is ag
#+END_SRC
** C/C++
Install the Clang compiler which is a compiler/frontend for C family languages based on LLVM:
#+BEGIN_SRC bash
yay -S clang
#+END_SRC

Update: Install =ccls= instead!
+Install cquery which is needed for emacs-cquery and lsp mode+
#+BEGIN_SRC bash
yay -S cquery
#+END_SRC

Install gdb (GNU debugger that can be used for many languages_
#+BEGIN_SRC bash
yay gdb
#+END_SRC
In Emacs gdb debug mode use OR use =nemiver= or =ddd= or someother graphical debugger:
- =break LL= to set breakpoint
- =delete XY= to delete breakpoint
- =run= to start the program
- =print XY= to print once
- =display XY= to print repeatedly automatic
- =print *(Student *)0x55555556b6b0= eg to print value at memory address 0x55555556b6b0 as a Student
- =x/12xb m->data= eg to examine memory of int array data and show the first 3 ints stored there / 12 bytes (3 integers a 4 bytes = 12)

See here for more on gdb http://kirste.userpage.fu-berlin.de/chemnet/use/info/gdb/gdb_9.html

*** Compilations
Assembly file:
#+BEGIN_SRC sh
g++ -S Math.cpp
#+END_SRC

Preprocessed file without linking:
#+BEGIN_SRC sh
g++ Math.cpp -c -E -P -o Math.cc
#+END_SRC

Compile without linking:
#+BEGIN_SRC sh
g++ -g Math.cpp -o Math -c
#+END_SRC

Compile and link:
#+BEGIN_SRC sh
g++ -g Math.cpp -o Math
#+END_SRC

** Javascript
Install the node version manager to manage different nodejs versions:
#+BEGIN_SRC bash
yay -S nvm
#+END_SRC
Then run the following if it isn't already present in =.zshrc=
#+BEGIN_SRC bash
echo 'source /usr/share/nvm/init-nvm.sh' >> ~/.zshrc
#+END_SRC
Note: having the above command in =.zshrc= slows down the prompt when opening a terminal immensely. You might want to have this line commented out when not working with js/node :)
If you want to execute node binaries also comment in the part where the node binaries are added to PATH.
Restart the shell and start installing node versions via:
#+BEGIN_SRC bash
nvm install 11 # current version at time of writing this!
#+END_SRC

** Go
Go projects will live in a specific folder (ususally =~/go=). I set this to =~/dev/go/= so make sure that folder exists (and verify that gopath is still set to that in =~/.zshrc=). Install:
#+BEGIN_SRC sh
yay go go-tools
#+END_SRC
Also "$GOPATH/bin" needs to be appended to the "$PATH" variable to be able to execute the Go binaries (eg godef). This should also be reflected in =~/.zshrc=.

Then install the needed dev tools, currently:
#+BEGIN_SRC sh
go get -u github.com/rogpeppe/godef/...
go get -u github.com/nsf/gocode
go get -u golang.org/x/tools/cmd/goimports
go get -u github.com/dougm/goflymake
go get -u golang.org/x/tools/cmd/guru
#+END_SRC

** C#
Install the dotnet sdk either from the aur or via the official site. Preferably do it via the official site because last time I installed it from AUR there were problems when running C# debugger

Link: https://www.microsoft.com/net/download or rather -> https://www.microsoft.com/net/download/thank-you/dotnet-sdk-2.1.403-linux-x64-binaries to install from source and not via some package managers
#+BEGIN_SRC sh
yay dotnet-sdk # from aur NOT recommended
#+END_SRC
And then comment in the relevant parts in .zshrc:
#+BEGIN_SRC sh
export DOTNET_ROOT=$HOME/arch/pkgs/dotnet 
export PATH=$PATH:$HOME/arch/pkgs/dotnet
#+END_SRC
In emacs run =omnisharp-install-server=.

** Ruby
Install =rbenv= to manage ruby versions.
#+BEGIN_SRC sh
yay rbenv
yay ruby-build # needed to install & compile ruby versions
#+END_SRC
Install a ruby version e.g version =2.6.1= (check which is the most current version beforehand)
#+BEGIN_SRC sh
rbenv install 2.6.1
#+END_SRC
Set the installed version to be the global default
#+BEGIN_SRC sh
rbenv global 2.6.1
#+END_SRC
Update the environment in accordance to the config
#+BEGIN_SRC sh
rbenv rehash
#+END_SRC
Verify the ruby version and also make sure that =eval "$(rbenv init -)"= is present in =.zshrc= for this to work:
#+BEGIN_SRC sh
ruby -v # => 2.6.1
which ruby
#+END_SRC
*** Ruby Gems
Some useful ruby gems to install globally:
#+BEGIN_SRC sh
gem install bundler pry pry-doc byebug
#+END_SRC
*** Rails
#+BEGIN_SRC sh
gem install rails
which rails
#+END_SRC

** Postgres
#+BEGIN_SRC sh
yay postgresql
sudo -u postgres -i initdb --locale $LANG -E UTF8 -D /var/lib/postgres/data
sudo systemctl start postgresql.service
sudo systemctl enable postgresql.service
sudo -u postgres -i
psql # might not work yet
#+END_SRC
When in postgres shell you can:
#+BEGIN_SRC sh
createuser --interactive -P
#+END_SRC
And/or create database
#+BEGIN_SRC sh
createdb -O octoprint octoprint_filamentmanager
# or
createdb bank 
# in the shell to create a db with the name "bank"
# you can then connect to the db via 
psql -U postgres bank # "postgres" is username you coulve used "eoshiru" or left it off altogether
#+END_SRC
Running =psql= works in psql-shell (after =sudo -u postgres -i=):
#+BEGIN_SRC sh
psql
\conninfo # for connection information
#+END_SRC
See these links when encountering problems:
- https://github.com/malnvenshorn/OctoPrint-FilamentManager/wiki/Setup-PostgreSQL-on-Arch-Linux
- https://help.ubuntu.com/community/PostgreSQL
  
Then may want to install =sqlite= (or =postico= on mac)

** Other
*** HTTP Rest Client
Use insomnia which can be installed through snap.


* Tips & Tricks
** Use more cores for compiling packages (mkkpkg)
In =/etc/makepkg.conf= change ~MAKEFLAGS="-jX"~ where =X= is the number of cores e.g =2=.

** Sort/update pacman mirrors
** Maintenance
#+BEGIN_SRC sh
sudo rm -rf /var/cache/pacman/pkg/*
sudo rm -rf /var/cache/man/*
ncdu -x / # Use as root to see where space is taken.
pacman -Qdt # to see orphan packages
systemctl --failed # check for failed systemd services
#+END_SRC
To monitor processes, cpu, memory etc install =glances=.
** Primer on zshell files
Since =.zshenv= is always sourced, it often contains exported variables that should be available to other programs. For example, $PATH, $EDITOR, and $PAGER are often set in .zshenv. Also, you can set $ZDOTDIR in .zshenv to specify an alternative location for the rest of your zsh configuration.

=.zshrc= is for interactive shell configuration. You set options for the interactive shell there with the setopt and unsetopt commands. You can also load shell modules, set your history options, change your prompt, set up zle and completion, et cetera. You also set any variables that are only used in the interactive shell (e.g. $LS_COLORS).

=.zlogin= is sourced on the start of a login shell. This file is often used to start X using startx. Some systems start X on boot, so this file is not always very useful.

=.zprofile= is basically the same as .zlogin except that it's sourced directly before .zshrc is sourced instead of directly after it. According to the zsh documentation, ".zprofile is meant as an alternative to `.zlogin' for ksh fans; the two are not intended to be used together, although this could certainly be done if desired."

=.zlogout= is sometimes used to clear and reset the terminal.
** Ignoring aliases
To execute a command that is shadowed by an alias prefix it with an backslash, e.g `\vim`
** SSH
Check for existing ssh keys:
#+BEGIN_SRC bash
ls -al ~/.ssh
#+END_SRC
Generate new ssh key:
#+BEGIN_SRC bash
# make sure that openssh is installed
yay -S openssh

ssh-keygen -t rsa -b 4096 -C "email@example.com"
#+END_SRC
Adding the ssh key to the ssh-agent:
#+BEGIN_SRC bash
eval "$(ssh-agent -s)" # start ssh-agent in background
ssh-add ~/.ssh/id_rsa # this needs to be the private not the public key file
#+END_SRC
** GPG
List keys:
#+BEGIN_SRC bash
gpg --list-keys
gpg --list-secret-keys
#+END_SRC
Export the private and public key:
#+BEGIN_SRC bash
gpg --export ${ID} > public.key
gpg --export-secret-keys ${ID} > private.key
#+END_SRC

To import the keys on for example another machine:
#+BEGIN_SRC bash
gpg --import public.key
gpg --import private.key
#+END_SRC

And trust the key(s) via:
#+BEGIN_SRC bash
gpg --edit-key ${ID}
trust
#+END_SRC

Then decrypt the files from the command line:
#+BEGIN_SRC bash
gpg -d file.gpg
#+END_SRC
** Services
List automatically started services:
#+BEGIN_SRC bash
systemctl list-unit-files --state=enabled
#+END_SRC

Check the status of an service:
#+BEGIN_SRC bash
systemctl status application.service
#+END_SRC

Start service in/for current session:
#+BEGIN_SRC bash
sudo systemctl start application.service
#+END_SRC

Stop service in/for current session:
#+BEGIN_SRC bash
sudo systemctl stop application.service
#+END_SRC

To enable an service to be started automatically on boot:
#+BEGIN_SRC bash
sudo systemctl enable application.service
#+END_SRC

To disable an automatically started service:
#+BEGIN_SRC bash
sudo systemctl disable application.service
#+END_SRC
** Formatting and mounting of external drives
First install =ntfs-3g= because by default only reading not writing is supported for ntfs partition.
** Mount Android device
Install =simple-mtpfs= and run =simple-mtpfs --device 1 ~/mnt= (maybe after restart). Then in file manager (eg =spacefm=) navigate to =mtp://=.
- Note: the folder =~/mnt= needs to exist before!
- to unmount run =fusermount -u ~/mnt=
** Changing "os name"
Edit =/etc/os-release= to e.g:
#+BEGIN_SRC 
NAME="Arch Linux"
ID=arch
PRETTY_NAME="Arch Linux"
ANSI_COLOR="0;36"
HOME_URL="https://www.archlinux.org/"
SUPPORT_URL="https://bbs.archlinux.org/"
BUG_REPORT_URL="https://bugs.archlinux.org/"
#+END_SRC
** Touchpad
If installed remove synaptic because its development is discontinued. Use libinput instead. To find out which drivers are currently used enter =grep -e "Using input" .local/share/xorg/Xorg.0.log=
#+BEGIN_SRC bash
xinput list # to list devices, search for eg 'touchpad' in the output. the number is the id
xinput list-props 11 # when 11 is the id
#+END_SRC
Put for example this in =/etc/X11/xorg.conf.d/30-touchpad.conf=:
#+BEGIN_SRC 
Section "InputClass"
        Identifier "libinput touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
	Option "Tapping" "on"
	Option "AccelSpeed" "0.5"
EndSection
#+END_SRC
** Source of an alias
To find out what a command is aliased to enter =type {command}=, e.g =type l=
** Change folder permission from root to user
=sudo chown -R eoshiru FOLDERNAME=
** Writing .iso to usb
Make sure the device/usb stick you want to write to is unmounted (=sudo umount /dev/sdb=) and then execute ~sudo dd if=file.iso of=/dev/sdb~.
** Bluetooth
Run bluetoothctl (be sure to have systemctl status bluetooth running or start it otherwise) 
- =show= lists devices
- =select= select bluetooth on machine via MAC (C0:18 )
- =agent on=
- =power on=
- =scan= 
- =connect= 1F:11
** Synchronizing Files/Folders
Install =rsync=. To synchronize a folder =src= to =dest= run:
#+BEGIN_SRC  bash
rsync -a {srcPath}/ {destPath}/
#+END_SRC
Dont forget the trailing slashes, else the first folder would be copied into the second!
If deletions should be synced as well specify =d= flag as well.
Usually the -t flag which is included in the -a flag syncs modification time as well, but in case it did not work try the following:
#+BEGIN_SRC bash
touch -m -r source/path/file dest/path/file
#+END_SRC
that reads the timestamp from /one file/ into another /file/. Look on google for automating this if needed or use a python script like
#+BEGIN_SRC python
#!/usr/bin/python

import os
import sys

for directory,subdirs,files in os.walk('.'):
    pathes=subdirs+files
    for path in pathes:
        fullpath=os.path.join(directory,path)
        target_path=os.path.join(sys.argv[1],fullpath)
        mtime=os.lstat(fullpath).st_mtime
        print('touching',target_path,':',)
        try:
            os.utime(target_path,(mtime,mtime))
            print('OK')
        except:
            print('FAILED')
#+END_SRC
which has to be run from the source folder and the destinaiton is the first argument like: =cd source; python ~/timescript.py dest/folder/=
*** Sync/Backup Commands
#+BEGIN_SRC sh
# Copy banking documents
rsync -a /home/eoshiru/library/docs/banking/ /run/media/eoshiru/Elements/library/docs/banking/
# Copy (misc) images
rsync -a /home/eoshiru/library/images/misc/ /run/media/eoshiru/Elements/library/images/misc/
# Copy (misc) videos
rsync -a /home/eoshiru/library/videos/misc/ /run/media/eoshiru/Elements/library/videos/misc/
# Copy (misc) audio
rsync -a /home/eoshiru/library/audio/misc/ /run/media/eoshiru/Elements/library/audio/misc/
# Copy not yet synced mp3's
rsync -a /home/eoshiru/Deezloader\ Music/mp3s/ /run/media/eoshiru/Elements/library/music/
#+END_SRC

** Youtube-DL
1. Check the formats
=youtube-dl -F "https://www.youtube.com/watch?v=9cnI05qQpdo"=

2. Get the timestamp from where the download should begin
- For example via "Copy video Video URL at current time" in YT


3. Execute
- =ffmpeg $(youtube-dl -g -f 22 'https://www.youtube.com/watch?v=kn_eCjXhWdo' | sed "s/.*/-ss 197 -i &/") -t 4 -c copy monte.mp4=
- where =22= is the format you want, =197= is the start second and =4= is the duration in second from the starting point onwards
  
To download the audio mp3 only run:
=youtube-dl --extract-audio --audio-format mp3 LINK=

To get for example the first 30 seconds of a video run
=ffmpeg -i input.mp4 -c copy -t 30 output.mp4=

Or for to example skip the first 30 seconds and then extract 10 seconds run
=ffmpeg -ss 00:00:30.0 -i input.wmv -c copy -t 00:00:10.0 output.wmv=
- instead of hh:mm:ss:xxx format only seconds (s.msec) could be used aswell
** Screenrecording
Plain and simple:
~ffmpeg -video_size 1920x1080 -framerate 30 -f x11grab -i :0.0 output.mkv~
With audio:
~ffmpeg -video_size 1920x1080 -framerate 30 -f x11grab -i :0.0 -f pulse -ac 2 -i 0 output.mkv~

Record certain area (fullscreen but not the top 50px):
~ffmpeg -video_size 1920x1030 -framerate 30 -f x11grab -i :0.0+0,50  output.mkv~

Convert .mkv to .mp4:
~ffmpeg -i output.mkv -codec copy output.mp4 ~

Extract audio from a video:
~ffmpeg -i Woche_1_02_SortierenUndSuchen.m4v -vn -acodec copy output-audio.aac~
** System Time
The correct way to do this would be by enabling ntpd.service via systemd.
pacman -Syu ntp Installed the required package
systemctl enable ntpd.service Enable it at boot so every time you boot the system the clock will be synchronized
systemctl start ntpd.service Start it immediately
One could also run ntpd -qg as root.
#+BEGIN_SRC sh
systemctl start ntpd.service
ntpd -qg
#+END_SRC
   
** Screenlock
Install xtrlock

** HTML to PDF
Use =wkhtmltopdf HTMLFILENAME PDFOUTPUTFILENAME= or use the browser's print feature
** List files and copy
To list files by modified date and copy them somewhere run:
#+BEGIN_SRC sh
cp -- `ls -tr --quoting-style={escape,shell,c}` DESTINATION_PATH
#+END_SRC
- =--= to =cp= signals that there are no more flags coming (from dashes in filename for example)
- =-tr= sorts by time and reverses
- =quoting-style= applies double quotes instead of single quoutes (required by cp command)

Edit: theoretically the above should work but it doesn't, this is what get's the job done:
#+BEGIN_SRC sh
ls --quoting-style={escape,shell,c} -tr . | xargs -I{} cp "{}" DESTINATION_PATH
#+END_SRC
(This is what I exactly ran from the folder with all the files I wanted:
#+BEGIN_SRC sh
ls --quoting-style={escape,shell,c} -tr | xargs -I{} cp "{}"/mnt/SandiskSD/music/
#+END_SRC
)
** Find and delete duplicates
To find duplicates
#+BEGIN_SRC 
fdupes .  
#+END_SRC
To delete duplicates
#+BEGIN_SRC sh
fdupes -d
#+END_SRC
To skip prompt add =-N= (dont do that)

** Recursively search & replace in Emacs
1. M-x find-name-dired: you will be prompted for a root directory and a filename pattern.
2. Press t to "toggle mark" for all files found.
3. Press Q for "Query-Replace in Files...": you will be prompted for query/substitution regexps.
4. Proceed as with query-replace-regexp: SPACE to replace and move to next match, n to skip a match, etc.
5. Press C-x s to save buffers. (You can then press y, n or ! to save all at once)

** Rip CDs
https://www.reddit.com/r/commandline/comments/d40cst/looking_for_cd_ripper_software/

* Current List of Installed Packages
alsa-utils
android-tools
audacity
autoconf
automake
awesome
awesome-freedesktop-git
awesome-revelation-git
bash
biber
binutils
bison
blockify
blueman
bluez
bluez-utils
brave-bin
bspwm
bzip2
chromium
clang
code
compton-tryone-git
coreutils
cpupower
cquery
cryptsetup
dbeaver
ddrescue
device-mapper
dhcpcd
dialog
diffutils
e2fsprogs
emacs-git
exfat-utils
fakeroot
fd
feh
file
filesystem
findutils
flatpak
flex
fontawesome.sty
fzf
gawk
gcc
gcc-libs
gdb
gettext
git
glances
glibc
gnuplot
go-tools
google-chrome
grep
groff
grub
gvfs
gvfs-mtp
gvfs-smb
gzip
heroku-cli
hexchat
hugo
hunspell
hunspell-en_US
inetutils
iproute2
iputils
jfsutils
k2pdfopt
keepassxc
lain-git
less
libtool
licenses
linux
linux-headers
logrotate
lvm2
m4
make
man-db
man-pages
mariadb
mdadm
mesa
mpv
nano
ncdu
neovim
netctl
network-manager-applet
networkmanager
nikola
noto-fonts
ntfs-3g
nvm
oh-my-zsh-git
openconnect
openssh
opera
pacman
patch
pavucontrol
pciutils
perl
pkgconf
poppler-glib
postgresql
postgresql-docs
postgresql-libs
procps-ng
psmisc
pulseaudio
pulseaudio-alsa
pulseaudio-bluetooth
pygmentize
python-pip
python2-attrs
r
rbenv
redshift
reiserfsprogs
rofi
rsync
ruby-build
s-nail
screenfetch
scrot
sed
shadow
simple-mtpfs
skypeforlinux-stable-bin
snapd
spacefm
speedcrunch
spotify
stow
sudo
sxhkd
sysfsutils
systemd
systemd-sysvcompat
tar
termite
testdisk
texinfo
texlive-bibtexextra
texlive-core
texlive-latexextra
the_silver_searcher
tk
tor-browser
transmission-gtk
ttf-bookerly
ttf-dejavu
ttf-fira-sans
ttf-roboto
ttf-unifont
unzip
usbutils
util-linux
valgrind
vi
weechat
wget
which
wireless_tools
wpa_actiond
wpa_supplicant
xdg-user-dirs
xf86-video-intel
xfsprogs
xorg-bdftopcf
xorg-iceauth
xorg-luit
xorg-mkfontscale
xorg-server
xorg-sessreg
xorg-setxkbmap
xorg-smproxy
xorg-x11perf
xorg-xauth
xorg-xbacklight
xorg-xcmsdb
xorg-xcursorgen
xorg-xdpyinfo
xorg-xdriinfo
xorg-xev
xorg-xgamma
xorg-xhost
xorg-xinit
xorg-xinput
xorg-xkbcomp
xorg-xkbevd
xorg-xkbutils
xorg-xkill
xorg-xlsatoms
xorg-xlsclients
xorg-xmodmap
xorg-xpr
xorg-xprop
xorg-xrandr
xorg-xrdb
xorg-xrefresh
xorg-xset
xorg-xsetroot
xorg-xvinfo
xorg-xwd
xorg-xwininfo
xorg-xwud
xournalpp
xterm
yay
youtube-dl-gui-git
zeal
zotero
zsh
zsh-autosuggestions
zsh-syntax-highlighting
