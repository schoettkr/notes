#+OPTIONS: num:nil
* Vorlesung
** Sequentielle Suche
*** Java
#+BEGIN_SRC java
public static int sequentialSearch(int[] nums, int toFind) {
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == toFind) {
            return i;
        }
    }
    return -1;
}


public static void test() {
    int[] unsortedArr = new int[] { 26, 20, 1, 22, 0, 25, 21, 2, 3, 5, 4, 7, 6, 10, 18, 13, 12, 9, 23, 24, 17, 8, 11, 16, 15, 14, 27, 28, 29, 19 };
    int[] sortedArr = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 };

    int numberToSearch = 16;
    int expectedResultIndex = 23; // index of where 16 is in unsortedArr
    int result = sequentialSearch(unsortedArr, 16);

    if (result == expectedResultIndex) {
        System.out.println("Correct result, function works");
    } else {
        System.out.println("Wrong. Did not get the expected result");
    }
    System.out.println("Expected: " + expectedResultIndex);
    System.out.println("Result: " + result);

}
#+END_SRC
*** Python
** Binäre Suche
Die Bedingung ~while (low <= high)~ fuer die Schleife ist passend, weil das Array
immer weiter "halbiert" wird (indem die zulaessigen indices low und high veraendert werden -> Grenzen),
was zwangsweise dazu führt das irgendwann nur noch ein Element in dem Array ist.
In diesem Fall ist der index low zb = 4 und der index high ebenfalls = 4, so dass das eine Element
an Indexstelle 4 mit dem gesuchten Element verglichen wird, da immer am Mittelpunkt des zulaessigen Arrays
verglichen wird also (4+4)/2 = 4. Ist dies nicht das gesuchte Element wird je nachdem ob das dort gefundene
Element groesser oder kleiner ist, als das gesuchte Element, die ~low~ grenze auf ~mid+1~ oder die ~high~ grenze
auf ~mid-1~ gesetzt, was dann der condition ~while (low <= high)~ widerspricht.
[[file:imgs/01_01.jpg][binary search]]
*** Java
#+BEGIN_SRC java
public static int binarySearch(int[] nums, int toFind) {
    int low = 0;
    int high = nums.length - 1;

    while (low < high) {
        int currentMiddle = (low + high) / 2;
        int num = nums[currentMiddle];
        if (num == toFind) {
            return currentMiddle;
        } else if (toFind < num) {
            high = currentMiddle - 1;
        } else if (toFind > num) {
            low = currentMiddle + 1;
        }
    }

    return -1;
}


public static void test() {
    int[] sortedArr = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 };

    int numberToSearch = 16;
    int expectedResultIndex = 16; // index of where 16 is in sortedArr
    int result = binarySearch(sortedArr, 16);

    if (result == expectedResultIndex) {
        System.out.println("Correct result, function works");
    } else {
        System.out.println("Wrong. Did not get the expected result");
    }
    System.out.println("Expected: " + expectedResultIndex);
    System.out.println("Result: " + result);

}
#+END_SRC
*** Python
** Bubble Sort
*** Java
#+BEGIN_SRC java
public static void bubbleSort(int[] arr) {
    boolean swapped = false;
    do {
        swapped = false;
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i+1]) {
                swapped = true;
                swap(arr, i, i+1);
            }
        }
    } while (swapped);
}

private static void swap(int[] arr, int idx1, int idx2) {
    int temp = arr[idx1];
    arr[idx1] = arr[idx2];
    arr[idx2] = temp;
}


public static void test() {
    int[] unsortedArr = new int[] { 26, 20, 1, 22, 0, 25, 21, 2, 3, 5, 4, 7, 6, 10, 18, 13, 12, 9, 23, 24, 17, 8, 11, 16, 15, 14, 27, 28, 29, 19 };
    int[] sortedArr = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 };

    bubbleSort(unsortedArr);

    for (int i = 0; i < unsortedArr.length; i++) {
        System.out.println(unsortedArr[i]);
    }
}
#+END_SRC
*** Python
** Selection Sort
Wählt das jeweils kleinste Element im Restarray und packt es an die erste "unsortierte" Stelle
See "Algorithms, 4th Edition Essential Information about Algorithms and Data Structures by Robert Sedgewick", page 248
*** Java
#+BEGIN_SRC java
public static void selectionSort(int[] arr) {
    for (int i = 0; i < arr.length; i++) {
        int smallestUnsortedItem = arr[i];
        int smallestUnsortedIdx = i;
        for (int j = i + 1; j < arr.length; j++) {
            if (arr[j] < smallestUnsortedItem) {
                smallestUnsortedItem = arr[j];
                smallestUnsortedIdx = j;
            }
        }
        swap(arr, i, smallestUnsortedIdx);
    }

}

private static void swap(int[] arr, int idx1, int idx2) {
    int temp = arr[idx1];
    arr[idx1] = arr[idx2];
    arr[idx2] = temp;
}


public static void test() {
    int[] unsortedArr = new int[] { 26, 20, 1, 22, 0, 25, 21, 2, 3, 5, 4, 7, 6, 10, 18, 13, 12, 9, 23, 24, 17, 8, 11, 16, 15, 14, 27, 28, 29, 19 };
    int[] sortedArr = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 };

    selectionSort(unsortedArr);

    for (int i = 0; i < unsortedArr.length; i++) {
        System.out.println(unsortedArr[i]);
    }
}

#+END_SRC
*** Python
** Insertion Sort
Schiebt ein Element aus dem Array in den sortierten Teil direkt an die richtige Stelle von den bisher betrachteten Elementen
See "Introduction to algorithms by Thomas H. Cormen", page 16 and "Algorithms, 4th Edition Essential Information about Algorithms and Data Structures by Robert Sedgewick", page 251

*** Java
#+BEGIN_SRC java
public static void insertionSort(int[] arr) {
    for (int i = 1; i < arr.length; i++) {
        int current = arr[i];
        int j = i - 1;
        while (j >= 0 && current < arr[j]) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = current;
    }
}

private static void swap(int[] arr, int idx1, int idx2) {
    int temp = arr[idx1];
    arr[idx1] = arr[idx2];
    arr[idx2] = temp;
}


public static void test() {
    int[] unsortedArr = new int[] { 26, 20, 1, 22, 0, 25, 21, 2, 3, 5, 4, 7, 6, 10, 18, 13, 12, 9, 23, 24, 17, 8, 11, 16, 15, 14, 27, 28, 29, 19 };
    int[] sortedArr = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 };

    insertionSort(unsortedArr);

    for (int i = 0; i < unsortedArr.length; i++) {
        System.out.println(unsortedArr[i]);
    }
}

#+END_SRC
*** Python
** Merge Sort
See "Algorithms, 4th Edition Essential Information about Algorithms and Data Structures by Robert Sedgewick", page 270
and "Introduction to algorithms by Thomas H. Cormen", page 34
*** Java
Naive implementation with creating/copying/slicing a lot of arrays:
#+BEGIN_SRC java
public static int[] mergeSort(int[] arr) {
    if (arr.length <= 1) {
        return arr;
    }
    int mid = arr.length/2;
    int[] left = new int[mid];
    int[] right = new int[arr.length-mid]; // one more slot when unequal eg 9/2=4.5=4 -> 9/4 = 5

    // fill left array
    for (int i = 0; i < mid; i++) {
        left[i] = arr[i];
    }
    // fill right array (has 1 more item when unequal arr length)
    for (int i = mid; i < arr.length; i++) {
        right[i-mid] = arr[i];
    }

    return merge(mergeSort(left), mergeSort(right)); // inline calls to avoid addiotional variables
}

private static int[] merge(int[] left, int[] right) {
    int[] sorted = new int[left.length+right.length];
    int leftIndex = 0;
    int rightIndex = 0;
    int i = 0;
    while (leftIndex < left.length && rightIndex < right.length) {
        if (left[leftIndex] <= right[rightIndex]) {
            sorted[i] = left[leftIndex];
            leftIndex++;
        } else {
            sorted[i] = right[rightIndex];
            rightIndex++;
        }
        i++;
    }
    // Add remaining elements
    while (leftIndex < left.length ){
        sorted[i++] = left[leftIndex++];
    }
    while (rightIndex < right.length) {
        sorted[i++] = right[rightIndex++];
    }

    return sorted;
}

public static void test() {
    int[] unsortedArr = new int[] { 26, 20, 1, 22, 0, 25, 21, 2, 3, 5, 4, 7, 6, 10, 18, 13, 12, 9, 23, 24, 17, 8, 11, 16, 15, 14, 27, 28, 29, 19 };
    int[] sortedArr = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 };

    int[] res = mergeSort(unsortedArr);

    for (int i = 0; i < res.length; i++) {
        System.out.println(res[i]);
    }
}
#+END_SRC

With two aux arrays but modifying the original array in place:
#+BEGIN_SRC java
public static void mergeSort(int[] arr, int left, int right) {
    if (left >= right) {
        return;
    }
    int mid = (left + right) / 2;
    mergeSort(arr, left, mid);
    mergeSort(arr, mid+1, right);
    stitch(arr, left, mid+1, right);
}

private static void stitch(int[] arr, int left, int mid, int right) {
    int[] auxLeft = new int[mid-left];
    int[] auxRight = new int[right-mid+1];
    for (int i = left; i < mid; i++) {
        auxLeft[i-left] = arr[i];
    }
    for (int i = mid; i <= right; i++) {
        auxRight[i-mid] = arr[i];
    }

    int j = 0;
    int k = 0;

    while (j < auxLeft.length && k < auxRight.length) {
        if (auxLeft[j] < auxRight[k]) {
            arr[left+j+k] = auxLeft[j];
            j++;
        } else {
            arr[left+j+k] = auxRight[k];
            k++;
        }
    }

    while (j < auxLeft.length) {
        arr[left+j+k] = auxLeft[j];
        j++;
    }
    while (k < auxRight.length) {
        arr[left+j+k] = auxRight[k];
        k++;
    }
}

public static void test() {
    int[] unsortedArr = new int[] { 26, 20, 1, 22, 0, 25, 21, 2, 3, 5, 4, 7, 6, 10, 18, 13, 12, 9, 23, 24, 17, 8, 11, 16, 15, 14, 27, 28, 29, 19 };
    int[] sortedArr = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 };

    mergeSort(unsortedArr, 0, unsortedArr.length-1);

    for (int i = 0; i < unsortedArr.length; i++) {
        System.out.println(unsortedArr[i]);
    }
}
#+END_SRC

*** Python
** QuickSort
See https://www.youtube.com/watch?v=0Ds3KqYeXzA , "The algorithm design manual by Steven S. Skiena", page 123, "Introduction to algorithms by Thomas H. Cormen", page 170 and "Algorithms, 4th Edition Essential Information about Algorithms and Data Structures by Robert Sedgewick", page 288

*** Java
#+BEGIN_SRC java
public static void quickSort(int[] arr) {
    qsort(arr, 0, arr.length-1);
}

private static void qsort(int[] arr, int leftBound, int rightBound) {
    int left = leftBound;
    int right = rightBound;

    if (left >= right) {
        return;
    }
    int pivotIdx = (leftBound+rightBound)/2;
    int pivot = arr[pivotIdx];

    while (left < right) {
        while (left < rightBound && arr[left] < pivot) {
            left++;
        }
        while (right > leftBound && arr[right] > pivot) {
            right--;
        }
        if (left <= right) {
            swap(arr, left, right);
            left++;
            right--;
        }
    }

    if (leftBound < right) {
        qsort(arr, leftBound, right);
    }

    if (rightBound > left) {
        qsort(arr, left, rightBound);
    }
}

private static void swap(int[] arr, int a, int b) {
    int temp = arr[a];
    arr[a] = arr[b];
    arr[b] = temp;
}


public static void test() {
    int[] unsortedArr = new int[] { 26, 20, 1, 22, 0, 25, 21, 2, 3, 5, 4, 7, 6, 10, 18, 13, 12, 9, 23, 24, 17, 8, 11, 16, 15, 14, 27, 28, 29, 19 };
    int[] sortedArr = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 };

    quickSort(unsortedArr);


    for (int i = 0; i < unsortedArr.length; i++) {
        System.out.println(unsortedArr[i]);
    }
}
#+END_SRC
*** Python

* Übung
** 1.) Ordnen Sie folgende Funktionen entsprechend ihrer Komplexität (beginnend mit der geringsten Komplexität). Geben Sie die Komplexitätsklasse in O-Notation an
[[file:imgs/01_aufg01.png][Funktionen]]
- f1 = O(n^2) =  quadratisch
- f2 =  O(n) = linear
- f3 =  O(c^n) = exponentiell
- f4 =  O(c^n) = exponentiell
- f5 =  O(log n) = logarithmish
- f6 =  O(n!) = factorial (Fakultät)
- f7 =  O(n) = linear
- f8 =  O(n) = linear

Reihenfolge: f8, f2, f7, f5, f1, f4, f3, f6

** 2.) Ausgabe in umgekehrter Reihenfolge
*** 2.a) Schreiben Sie eine Funktion, die Ihnen das Wort „Datenstrukturen“ in umgekehrter Reihenfolge ausgibt („nerutkurtsnetaD“)
#+BEGIN_SRC java
public static void reversePrint(String s) {
    for (int i = s.length()-1; i >= 0; i--) {
        System.out.print(s.charAt(i));
    }
    System.out.println();
}
#+END_SRC
#+BEGIN_SRC python
def reversePrint(s):
    # for i in range(len(s)-1, -1, -1):
    i = len(s) - 1
    while (i >= 0):
        print(s[i], end = "")
        i -= 1
    print()

reversePrint("Datenstrukturen")
#+END_SRC
*** 2.b) Schreiben Sie eine Funktion, die Ihnen ein Array „Früchte“ (Banane, Apfel, Erdbeere, Orange) in umgekehrter Reihenfolge ausgibt (Orange, Erdbeere, Apfel, Banane)
#+BEGIN_SRC java
public static void reversePrint(String[] arr) {
    for (int i = arr.length-1; i >= 0; i--) {
        System.out.println(arr[i]);
    }
}
#+END_SRC
#+BEGIN_SRC python
def reversePrint(arr):
    # for i in range(len(arr)-1, -1, -1):
    i = len(arr) - 1
    while (i >= 0):
        print(arr[i])
        i -= 1

reversePrint([ "Banane", "Apfel", "Erdbeere", "Orange" ])
#+END_SRC
** 3.) Finden Sie die sich wiederholende Zahl! Gegeben sei ein Integer Feld der Dimension N+1. Jeder Integer liegt zwischen 1 und n(inklusive).
*** 3.a) Gibt es Zahlen die sich wiederholen? Wenn ja, wieso?
Ja es gibt mind. eine sich wiederholende Zahl da das Array mehr Zahlen beinhaltet als es einzigartige Zahlen in dem Bereich zwischen 1 und n (inkl) gibt
*** 3.b) Finden Sie die sich doppelnde Zahl.
Anmerkung: Es sei davon auszugehen, dass sich nur eine Zahl, dafür beliebig oft, wiederholen kann.
#+BEGIN_SRC java
import java.util.*;
public static int findFirstDuplicateNum(int[] arr) {
    Set<Integer> alreadySeen = new HashSet<Integer>();
    for (int i = 0; i < arr.length; i++) {
        int current = arr[i];
        if (alreadySeen.contains(current)) {
            return current;
        }
        alreadySeen.add(current);
    }
    return -1;
}
#+END_SRC
#+BEGIN_SRC python
#!/usr/bin/env python
def findFirstDuplicate(arr):
    visited = {}
    for num in arr:
        if num in visited:
            return num
        else:
            visited[num] = True
    return -1

arr = [1,2,3,4,5,6,7,7,8,9,10,11,12,12,13,14]
dup = findFirstDuplicate(arr)
print(dup)
#+END_SRC
** 4.) Gegeben ist ein Array (3,7,5,10,6,2,8).
*** 4.a) Schreiben Sie eine Funktion, die das Array sortiert. Nutzen Sie hierfür das „Insertion Sort“ Verfahren.
#+BEGIN_SRC java
public static void insertionSort(int[] arr) {
    for (int i = 1; i < arr.length; i++) {
        int j = i - 1;
        int k = i;
        while (j >= 0 && arr[k] < arr[j]) {
            swap(arr, k, j);
            k--;
            j--;
        }
    }
}
private static void swap(int[] arr, int a, int b) {
    int tmp = arr[a];
    arr[a] = arr[b];
    arr[b] = tmp;
}
#+END_SRC
#+BEGIN_SRC python
def insertionSort(arr):
    for idx in range(len(arr)):
        current = arr[idx]
        j = idx-1
        while j >= 0 and arr[j] > current:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = current


unsortedArr = [26, 20, 1, 22, 0, 25, 21, 2, 3, 5, 4, 7, 6, 10, 18, 13, 12, 9, 23, 24, 17, 8, 11, 16, 15, 14, 27, 28, 29, 19 ]

insertionSort(unsortedArr)
print(unsortedArr)
#+END_SRC
*** 4.b) Welche weiteren Sortierverfahren kennen Sie? Welche Komplexitätsklassen weisen diese Verfahren auf?
- Bubblesort mit O(n^2)
- Selection Sort mit O(n^2)
- Insertion Sort O(n^2)
- MergeSort mit O(n log n) aber auch O(n) space complexity
- Quicksort mit O(n log n) mit O(log n) space complexity im worst case
